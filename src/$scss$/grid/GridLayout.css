@layer u2-grid-box {
  .u2-grid-layout {
    --c-gap: clamp(min(1rem, 8cqmin), min(calc(8cqmin / min(var(--layout-c, 4), var(--layout-r, 8))), calc(6cqmax / max(var(--layout-c, 4), var(--layout-r, 8)))), min(4rem, 16cqmin));
    --r-gap: clamp(min(1rem, 8cqmin), min(calc(8cqmin / min(var(--layout-c, 4), var(--layout-r, 8))), calc(6cqmax / max(var(--layout-c, 4), var(--layout-r, 8)))), min(4rem, 16cqmin));
  }
  .u2-grid-layout {
    display: block flow;
    position: relative;
    container-name: u2-grid;
    container-type: size;
    contain: size layout;
    zoom: 1;
    direction: ltr;
    pointer-events: none;
    background-color: transparent;
    inline-size: 100%;
    block-size: 100%;
  }
  .u2-grid-layout > :where(*) {
    --p-cell-x: var(--cell-x);
    --p-cell-y: var(--cell-y);
    --f-col: clamp(4, var(--layout-c, 4), 6);
    --f-row: clamp(8, var(--layout-r, 8), 12);
    --fc-cell-x: calc(clamp(0, var(--cell-x), calc(var(--f-col) - 1)) + 1);
    --fc-cell-y: calc(clamp(0, var(--cell-y), calc(var(--f-row) - 1)) + 1);
    --fp-cell-x: calc(clamp(0, var(--p-cell-x), calc(var(--f-col) - 1)) + 1);
    --fp-cell-y: calc(clamp(0, var(--p-cell-y), calc(var(--f-row) - 1)) + 1);
    --dir-x: calc(var(--fc-cell-x) - var(--fp-cell-x));
    --dir-y: calc(var(--fc-cell-y) - var(--fp-cell-y));
    --grid-c: var(--fc-cell-x);
    --grid-r: var(--fc-cell-y);
  }
  .u2-grid-layout > :where(*) {
    --icon-size: min((100cqmin / min(calc(var(--layout-c, 4) / var(--ox-c-span, 1)), calc(var(--layout-r, 8) / var(--ox-r-span, 1)))) - 0.5 * min(var(--c-gap, 1rem), var(--r-gap, 1rem)), 6rem);
  }
  .u2-grid-layout > :where(*) * {
    --drag-x: 0;
    --drag-y: 0;
  }
  .u2-grid-layout > :where(*) {
    --drag-x: 0;
    --cs-drag-x: calc(var(--drag-x, 0) * 1px);
    --drag-y: 0;
    --cs-drag-y: calc(var(--drag-y, 0) * 1px);
  }
  .u2-grid-layout > :where(*) {
    --ox-c-unit: calc(var(--os-size-x, 100cqi) / var(--layout-c, 0));
    --ox-r-unit: calc(var(--os-size-y, 100cqb) / var(--layout-r, 0));
    --os-inset-x: calc((var(--grid-c) - 0.5) * var(--ox-c-unit));
    --os-inset-y: calc((var(--grid-r) - 0.5) * var(--ox-r-unit));
  }
  .u2-grid-layout > :where(*) {
    position: absolute;
    transform-origin: 0% 0%;
    transform: translate3d(round(nearest, var(--cs-drag-x, 0px), 1px / var(--pixel-ratio, 1)), round(nearest, var(--cs-drag-y, 0px), 1px / var(--pixel-ratio, 1)), 0px) scale3d(var(--scale, 1), var(--scale, 1), var(--scale, 1)) translate3d(round(nearest, var(--translate-x, 0px) - 50%, 1px / var(--pixel-ratio, 1)), round(nearest, var(--translate-y, 0px) - 50%, 1px / var(--pixel-ratio, 1)), 0px) !important;
    inset: var(--cs-inset-y, 0px) auto auto var(--cs-inset-x, 0px);
    zoom: 1;
    place-self: center;
    min-inline-size: 1px;
    min-block-size: 1px;
    inline-size: 100%;
    block-size: 100%;
    max-inline-size: var(--icon-size, 1px);
    max-block-size: var(--icon-size, 1px);
    pointer-events: none;
    touch-action: none;
    -webkit-user-select: none;
       -moz-user-select: none;
            user-select: none;
    -webkit-user-drag: none;
    -moz-user-drag: none;
    overflow: visible;
  }
  .u2-grid-layout > :where(*) {
    transition-behavior: allow-discrete;
    transition-property: transform;
    transition-duration: calc(var(--drag-d, 0.01) * 0.8ms);
    transition-timing-function: linear;
    transition-delay: 0ms;
  }
  @supports ((min-inline-size: max(1px, -moz-max-content)) or (min-inline-size: max(1px, max-content))) {
    .u2-grid-layout > :where(*) {
      min-inline-size: max(1px, -moz-max-content);
      min-inline-size: max(1px, max-content);
      min-block-size: max(1px, -moz-max-content);
      min-block-size: max(1px, max-content);
    }
  }
  .u2-grid-layout > :where(*) > :where(*) {
    inline-size: 100%;
    block-size: 100%;
  }
  .u2-grid-layout > :where(*[data-dragging]) {
    --grid-c: var(--fp-cell-x);
    --grid-r: var(--fp-cell-y);
  }
}/*# sourceMappingURL=GridLayout.css.map */